apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'cpp'
if (System.properties['os.name'].toLowerCase().contains('windows')) {
	apply plugin: 'windows-resources'
	apply plugin: 'visual-studio'
}

// C++ specific build configurations

// Acquiring environment variables
def opencvhome = System.getenv("OPENCV_HOME")

// Include directories
def opencvinclude = opencvhome + "\\include"

// Lib directories
def opencvlibs = opencvhome + "\\lib"


model {
    repositories {
        libs(PrebuiltLibraries) {
            opencv {
                headers.srcDir opencvinclude

                binaries.withType(StaticLibraryBinary) {
                    def libName = targetPlatform.operatingSystem.windows ? 'opencv_core300.lib' : 'libopencv_core.a'
                    staticLibraryFile = file(opencvlibs + File.separator + libName)
                }

                binaries.withType(SharedLibraryBinary) {
                    def libDynName = targetPlatform.operatingSystem.windows ? 'opencv_core300.dll' : 'libopencv_core.so'
                    def libStaticName = targetPlatform.operatingSystem.windows ? 'opencv_core300.lib' : 'libopencv_core.a'
                    
                    // Windows uses a .dll file, with a different link file if it exists (not Cygwin or MinGW)
                    sharedLibraryFile = file(opencvlibs + File.separator + libDynName)
                    if (file(opencvlibs + File.separator + libStaticName).exists()) {
                        sharedLibraryLinkFile = file(opencvlibs + File.separator + libStaticName)
                    }
                }
            }
        }
    }

    components {
        main(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs "src/main/cpp"
                    }
                    exportedHeaders {
                        srcDirs "src/main/include"
                    }
                }

                cpp.lib library:'opencv', linkage:'api'
            }
        }
    }

    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        visualStudio {
            projects.all {
                projectFile.location = "vs/${name}.vcxproj"
                filtersFile.location = "vs/${name}.vcxproj.filters"
            }
            solutions.all {
                solutionFile.location = "vs/${name}.sln"
            }
        }
    }

    buildTypes {
        debug
        release
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}

// For any shared library binaries built with Visual C++,
// define the DLL_EXPORT macro
binaries.withType(NativeLibrarySpec) {
    if (toolChain in VisualCpp) {
        cCompiler.include "/I" + includes
        cCompiler.args "/Zi"
        cCompiler.define "DLL_EXPORT"
    }
    
    if (toolChain in Gcc && buildType == buildTypes.debug) {
        cCompiler.include "-I" + includes
        cppCompiler.args "-g "
    }
    
    if (toolChain in VisualCpp && buildType == buildTypes.debug) {

        cppCompiler.args '/Zi'
        cppCompiler.define 'DEBUG'
        linker.args '/DEBUG'
    }
}


// Java specific build configurations

sourceCompatibility = 1.7
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Modulo7',
                   'Implementation-Version': 1.0,
                    'Main-Class': 'Modulo7CLI   '
    }

    // remove the security files (from mail.jar / activation.jar) so that the jar will be executable.
    doFirst {
        from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
}

test {

    // Setup the audiveris jar location in gradle build
    environment 'AUDIVERIS_JAR_LOCATION', '/usr/bin/audiveris/AudiverisApp/dist'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "1024m"

    // set JVM arguments for the test JVM(s)
    jvmArgs '-XX:MaxPermSize=512m'

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    if (System.getProperty('DEBUG', 'false') == 'true') {
        jvmArgs '-Xdebug',
                '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
    }
}

repositories {
    mavenCentral()
}

dependencies {

	compile group: 'org.apache.lucene', name: 'lucene-analyzers', version: '3.6.2'
    compile group: 'org.apache.lucene', name : 'lucene-queryparser', version: '4.0.0'
    compile group: 'org.apache.lucene', name: 'lucene-analyzers-common', version:'4.1.0'
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '4.1.0'
	compile group: 'org.jsoup', name: 'jsoup', version: '1.7.2'
	compile group: 'org.json', name: 'json', version: '20140107'
    compile group: 'com.googlecode.jen-api', name: 'jen-api', version: '4.x.p'
    compile group: 'org.apache.httpcomponents', name:'httpclient',version: '4.5'
    compile group: 'com.googlecode.jen-api', name: 'jen-api', version: '4.x.p'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.apache.avro', name: 'avro', version: '1.7.7'
    compile group: 'commons-collections', name:'commons-collections', version:'3.0'
    compile group: 'org.apache.commons', name:'commons-lang3', version:'3.1'
    compile group: 'org.apache.lucene', name:'lucene-spellchecker', version:'3.3.0'
    compile group: 'org.apache.commons', name:'commons-math3',  version:'3.0'
    compile group: 'org.hdfgroup', name:'hdf-java', version:'2.6.1'

    // Test compile artifacts
    testCompile 'junit:junit:4.12'

    // Antlr dependency for grammar parsing
    antlr "org.antlr:antlr4:4.5.1" // use ANTLR version 4
}

generateGrammarSource {
    maxHeapSize = "128m"
    arguments += ["-visitor", "-long-messages"]
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
